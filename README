Starting Time: 2025/4/25

Finishing Time: 

- Lecture 1: Course intro, Explained some syscalls in xv6(including open, read, write, fork, exec) --2025/4/25
- Lecture 2：C in xv6, including array, memory management, pointer ...  --2025/4/26
- Lecture 3: OS abstract thr HW resources, strong isolation between OS & APP supported by HW, user mode/kernel mode, trust computing base(kernel must have no bug & kernel must treat process as malicious), dig into xv6 source code --2025/4/26
- Lecture 4: Pagging, virtual memory and physical memory, RiscV HW support --2025/4/28
- Lecture 5: Trap(interrupt, exception, syscall), Use of Trapoline, How a syscall really work in xv6 --2025/4/28
- Lecture 6: use of GDB, xv6 calling convention --2025/4/30
- lecture 7: page fault, lazy allocation, one zero fill on demand, copy-on-write(COW) fork, demand paging, memory-mapped files --2025/5/1
- lecture 8: instructor answer of lab page table --2025/5/1

- Lab1 utils(6 hours): setup lab environment, install some tools, implement user programs using lib functions --2025/4/26
- Lab2 syscall(7 hours): debug with gdb, implement a syscall trace, write a program attack kernel --2025/4/27
- lab3 pagetable(16 hours): inspect user-process pagetable, share page btwn kernel and uprocess, superpages --2025/4/30
- lab4 trap(6.5 hours): backtrace, process of trap --2025/5/3

Debug tips:
- first terminal: make GPUS=1 qemu-gdb // 令调试时线程数为1
- second terminal: gdb-multiarch


xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
